define-fun sym.main(unknown) -> unknown {
    entry-register-state:
        %1: $Unknown64(*?) = $rbx;
        %2: $Unknown64(*?) = $r9;
        %3: $Unknown64(*?) = $r8;
        %4: $Unknown64(*?) = $rax;
        %5: $Unknown64(*?) = $rcx;
        %6: $Unknown64(*?) = $rdx;
        %7: $Unknown64(*?) = $rsi;
        %8: $Unknown64(*?) = $rsp;
        %9: $Unknown0 = $mem;
    bb_0x0006A0.0000(sz 0x4):
        [@0x0006A0.0001] %10: $Unknown64(*?) = %8 - #x8;
        [@0x0006A0.0006] %11: $Unknown0 = Store(%9, %10, %4);
        [@0x0006A1.0000] %12: $Unknown64(*?) = %8 - #x10;
        [@0x0006A1.0004] %13: $Unknown0 = Store(%11, %12, %1);
        [@0x0006A2.0000] %14: $Unknown32(*?) = Narrow32(%1);
        [@0x0006A2.0001] %15: $Unknown32(*?) = Narrow32(%1);
        [@0x0006A2.0002] %16: $Unknown32(*?) = %14 ^ %15;
        [@0x0006A2.0005] %17: $Unknown64(*?) = ZeroExt64(%16);
        [@0x0006A2.0006] %18: $Unknown64(*?) = %1 & #xffffffff00000000;
        [@0x0006A2.0007] %19: $Unknown64(*?) = %17 | %18;
        [@0x0006A2.0032] %20: $Unknown64(*?) = %19 & #xffffffff;
        JMP 0x0006A6.0000
    bb_0x0006A6.0000(sz 0x0):
        %21: $Unknown64(*?) = Phi(%2, %22);
        %23: $Unknown64(*?) = Phi(%24, %20);
        %25: $Unknown64(*?) = Phi(%6, %26);
        %27: $Unknown64(*?) = Phi(%5, %28);
        %29: $Unknown64(*?) = Phi(%12, %30);
        %31: $Unknown64(*?) = Phi(%3, %32);
        %33: $Unknown64(*?) = Phi(%7, %34);
        %35: $Unknown0 = Phi(%13, %36);
        JMP 0x0006A8.0000
    bb_0x0006A8.0000(sz 0x1b):
        [@0x0006AF.0003] %37: $Unknown32(*?) = Narrow32(%23);
        [@0x0006AF.0004] %38: $Unknown64(*?) = ZeroExt64(%37);
        [@0x0006AF.0005] %39: $Unknown64(*?) = %33 & #xffffffff00000000;
        [@0x0006AF.0006] %40: $Unknown64(*?) = %38 | %39;
        [@0x0006AF.0008] %41: $Unknown64(*?) = %40 & #xffffffff;
        [@0x0006B3.0021] (%42: $Unknown64(*?) = $r9, %43: $Unknown64(*?) = $r8, %44: $Unknown64(*?) = $rax, %45: $Unknown64(*?) = $rcx, %46: $Unknown64(*?) = $rdx, %47: $Unknown64(*?) = $rsi, %48: $Unknown0 = $mem) = CALL #x580($r9=%21, $r8=%31, $rcx=%27, $rdx=%25, $rsi=%41, $rdi=#x768, $mem=%35);
        [@0x0006B8.0002] (%49: $Unknown64(*?) = $r9, %50: $Unknown64(*?) = $r8, %24: $Unknown64(*?) = $rax, %51: $Unknown64(*?) = $rcx, %52: $Unknown64(*?) = $rdx, %53: $Unknown64(*?) = $rsi, %30: $Unknown64(*?) = $rsp, %54: $Unknown0 = $mem) = CALL #x680($r9=%42, $r8=%43, $rax=%44, $rcx=%45, $rdx=%46, $rsi=%47, $rsp=%29, $mem=%48);
        [@0x0006C0.0000] %55: $Unknown32(*?) = Narrow32(%24);
        [@0x0006C0.0001] %56: $Unknown32(*?) = Narrow32(#x0);
        [@0x0006C0.0002] %57: $Unknown32 = %55 - %56;
        [@0x0006C0.0004] %58: $Unknown32(*?) = Narrow32(#xffffffff);
        [@0x0006C0.0005] %59: $Unknown32(*?) = %57 & %58;
        [@0x0006C0.0007] %60: $Unknown32(*?) = Narrow32(#x1);
        [@0x0006C0.0008] %61: $Unknown32(*?) = %60 ^ %59;
        [@0x0006C0.000A] %62: $Unknown1(*?) = Narrow1(%61);
        JMP IF %62 0x0006C7.0000 ELSE 0x0006D9.0000
    bb_0x0006C7.0000(sz 0x10):
        [@0x0006CE.0003] %63: $Unknown32(*?) = Narrow32(%24);
        [@0x0006CE.0004] %64: $Unknown64(*?) = ZeroExt64(%63);
        [@0x0006CE.0005] %65: $Unknown64(*?) = %53 & #xffffffff00000000;
        [@0x0006CE.0006] %66: $Unknown64(*?) = %64 | %65;
        [@0x0006CE.0008] %67: $Unknown64(*?) = %66 & #xffffffff;
        [@0x0006D2.0021] (%22: $Unknown64(*?) = $r9, %32: $Unknown64(*?) = $r8, %28: $Unknown64(*?) = $rcx, %26: $Unknown64(*?) = $rdx, %34: $Unknown64(*?) = $rsi, %36: $Unknown0 = $mem) = CALL #x580($r9=%49, $r8=%50, $rcx=%51, $rdx=%52, $rsi=%67, $rdi=#x76d, $mem=%54);
        JMP 0x0006A6.0000
    bb_0x0006D9.0000(sz 0x0):
        [@0x0006DC.0004] %68: $Unknown64(*?) = #x10 + %30;
        [@0x0006DD.0000] %69: $Unknown64(*?) = Load(%54, %68);
        JMP TO %69
    exit-node:
        %70: $Unknown64(*?) = Phi();
        %71: $Unknown64(*?) = Phi();
        %72: $Unknown64(*?) = Phi();
        %73: $Unknown64(*?) = Phi();
        %74: $Unknown64(*?) = Phi();
        %75: $Unknown64(*?) = Phi();
        %76: $Unknown64(*?) = Phi();
        %77: $Unknown64(*?) = Phi();
        %78: $Unknown64(*?) = Phi();
        %79: $Unknown64(*?) = Phi();
        %80: $Unknown64(*?) = Phi();
        %81: $Unknown64(*?) = Phi();
        %82: $Unknown64(*?) = Phi();
        %83: $Unknown64(*?) = Phi();
        %84: $Unknown64(*?) = Phi();
        %85: $Unknown64(*?) = Phi();
        %86: $Unknown64(*?) = Phi();
        %87: $Unknown1(*?) = Phi();
        %88: $Unknown1(*?) = Phi();
        %89: $Unknown1(*?) = Phi();
        %90: $Unknown1(*?) = Phi();
        %91: $Unknown1(*?) = Phi();
        %92: $Unknown1(*?) = Phi();
        %93: $Unknown1(*?) = Phi();
        %94: $Unknown1(*?) = Phi();
        %95: $Unknown1(*?) = Phi();
        %96: $Unknown64(*?) = Phi();
        %97: $Unknown64(*?) = Phi();
        %98: $Unknown64(*?) = Phi();
        %99: $Unknown64(*?) = Phi();
        %100: $Unknown64(*?) = Phi();
        %101: $Unknown64(*?) = Phi();
        %102: $Unknown64(*?) = Phi();
        %103: $Unknown64(*?) = Phi();
        %104: $Unknown0 = Phi();
    final-register-state:
        $r15 = %70;
        $r14 = %71;
        $r13 = %72;
        $r12 = %73;
        $rbp = %74;
        $rbx = %75;
        $r11 = %76;
        $r10 = %77;
        $r9 = %78;
        $r8 = %79;
        $rax = %80;
        $rcx = %81;
        $rdx = %82;
        $rsi = %83;
        $rdi = %84;
        $rip = %85;
        $cs = %86;
        $cf = %87;
        $pf = %88;
        $af = %89;
        $zf = %90;
        $sf = %91;
        $tf = %92;
        $if = %93;
        $df = %94;
        $of = %95;
        $rsp = %96;
        $ss = %97;
        $fs_base = %98;
        $gs_base = %99;
        $ds = %100;
        $es = %101;
        $fs = %102;
        $gs = %103;
        $mem = %104;
}
